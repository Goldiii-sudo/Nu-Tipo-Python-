import telebot
from telebot import types

# –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot("8287607784:AAFToqSTAGtH989wEmI5tdT0bBDMFeM0RHE")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_requests = {}
user_applications = {}  # –•—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
admin_reply_mode = {}   # –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞

# –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID
ADMIN_ID = 5049406522  # ‚Üê –¢–í–û–ô ID –ó–î–ï–°–¨

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
    if message.chat.id == ADMIN_ID and ADMIN_ID in admin_reply_mode:
        del admin_reply_mode[ADMIN_ID]
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_problem = types.KeyboardButton('üö® –ü—Ä–æ–±–ª–µ–º–∞')
    btn_suggestion = types.KeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
    markup.add(btn_problem, btn_suggestion)
    
    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ë–æ—Ç–¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–∏ DogClient*! 
    
üìù –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞, –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –ø–æ–∂–∞–ª–µ–µ–º! üéÅüí∞

*–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:*"""
    
    bot.send_message(message.chat.id, welcome_text, 
                     reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text in ['üö® –ü—Ä–æ–±–ª–µ–º–∞', 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'])
def handle_request_type(message):
    chat_id = message.chat.id
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if chat_id == ADMIN_ID and ADMIN_ID in admin_reply_mode:
        return
    
    request_type = "–ø—Ä–æ–±–ª–µ–º—É" if message.text == 'üö® –ü—Ä–æ–±–ª–µ–º–∞' else "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏
    user_requests[chat_id] = {'type': request_type}
    
    sample_text = f"""
üìã *–û–±—Ä–∞–∑–µ—Ü –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è {request_type}:*

1Ô∏è‚É£ *–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ {request_type}*
2Ô∏è‚É£ *–ö —á–µ–º—É –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è* (—á–∏—Ç—ã, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –±–∞–≥–∏ –∏ —Ç.–¥.)
3Ô∏è‚É£ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ* –ø–æ —Ä–µ—à–µ–Ω–∏—é/—É–ª—É—á—à–µ–Ω–∏—é

‚ú® *–ü—Ä–∏–º–µ—Ä:*
1. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Ç–µ—Ä—è
2. –û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–æ–¥—É–ª—é PvP
3. –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ –æ–±—Ä–∞–∑—Ü—É –≤—ã—à–µ*"""
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
    markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, sample_text, 
                     reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.chat.id in user_requests)
def handle_user_request(message):
    chat_id = message.chat.id
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if chat_id == ADMIN_ID and ADMIN_ID in admin_reply_mode:
        return
    
    user_request = user_requests[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ —Ç—Ä–∏ –ø—É–Ω–∫—Ç–∞
    lines = message.text.split('\n')
    numbered_lines = [line for line in lines if any(line.strip().startswith(str(i)) for i in range(1, 4))]
    
    if len(numbered_lines) >= 3:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        request_text = f"""üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É*

üë§ *–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{message.from_user.username or '–ù–µ—Ç username'}
üÜî *ID:* {message.from_user.id}
üìä *–¢–∏–ø:* {user_request['type']}

üìù *–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:*
{message.text}

‚è∞ *–í—Ä–µ–º—è:* {message.date}"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        application_id = f"{chat_id}_{message.message_id}"
        user_applications[application_id] = {
            'user_id': chat_id,
            'username': message.from_user.username or '–ë–µ–∑ username',
            'text': message.text
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(chat_id, "‚úÖ *–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –≤–∞–º! üöÄ", 
                         parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
        markup = types.InlineKeyboardMarkup()
        btn_reply = types.InlineKeyboardButton('üíå –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=f'reply_{application_id}')
        markup.add(btn_reply)
        
        try:
            bot.send_message(ADMIN_ID, request_text, reply_markup=markup, parse_mode='Markdown')
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É (ID: {ADMIN_ID})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del user_requests[chat_id]
        
    else:
        bot.send_message(chat_id, "‚ùå *–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É!*\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑–µ—Ü —Å —Ç—Ä–µ–º—è –ø—É–Ω–∫—Ç–∞–º–∏:\n\n1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n2. –ö —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è\n3. –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                         parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_reply_callback(call):
    application_id = call.data.replace('reply_', '')
    
    if application_id in user_applications:
        application = user_applications[application_id]
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_reply_mode[ADMIN_ID] = {
            'target_user_id': application['user_id'],
            'application_id': application_id,
            'username': application['username']
        }
        
        # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
        bot.send_message(ADMIN_ID, 
                        f"üíå *–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω*\n\n"
                        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{application['username']}\n"
                        f"üÜî *ID:* {application['user_id']}\n\n"
                        f"üìù *–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ:*\n"
                        f"(–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å /start)",
                        parse_mode='Markdown')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞ (–∫–æ–≥–¥–∞ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞)
@bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID and message.chat.id in admin_reply_mode)
def handle_admin_reply(message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    admin_data = admin_reply_mode[ADMIN_ID]
    target_user_id = admin_data['target_user_id']
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        reply_text = f"""üíå *–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ DogClient:*

{message.text}

üéÅ *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!*"""
        
        bot.send_message(target_user_id, reply_text, parse_mode='Markdown')
        bot.send_message(ADMIN_ID, "‚úÖ *–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!*", parse_mode='Markdown')
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ø–∞–º—è—Ç–∏
        application_id = admin_data['application_id']
        if application_id in user_applications:
            del user_applications[application_id]
            
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:* {e}", parse_mode='Markdown')
    
    # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
    del admin_reply_mode[ADMIN_ID]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—è–≤–∫–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
    if message.chat.id not in user_requests and message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
    elif message.chat.id == ADMIN_ID and ADMIN_ID in admin_reply_mode:
        # –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
        pass

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("ü§ñ –ë–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω!")
print("üíå –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞—è–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
bot.polling(none_stop=True)
